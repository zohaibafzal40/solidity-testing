{
	"id": "92d5d6fe4f74413ef96e3cb350b152e5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"while.sol": {
				"content": "// SPDX-License-identifier: MIT-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract While{\r\n\r\n    \r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"while.sol": {
				"While": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"while.sol\":66:92  contract While{\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"while.sol\":66:92  contract While{\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208cd70b4b600d8fb0a245207302082a6df63643c4ed35aebcd1932c29ca6a973564736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208cd70b4b600d8fb0a245207302082a6df63643c4ed35aebcd1932c29ca6a973564736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xD7 SIGNEXTEND 0x4B PUSH1 0xD DUP16 0xB0 LOG2 GASLIMIT KECCAK256 PUSH20 0x2082A6DF63643C4ED35AEBCD1932C29CA6A9735 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "66:26:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea26469706673582212208cd70b4b600d8fb0a245207302082a6df63643c4ed35aebcd1932c29ca6a973564736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xD7 SIGNEXTEND 0x4B PUSH1 0xD DUP16 0xB0 LOG2 GASLIMIT KECCAK256 PUSH20 0x2082A6DF63643C4ED35AEBCD1932C29CA6A9735 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "66:26:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 66,
									"end": 92,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66,
									"end": 92,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208cd70b4b600d8fb0a245207302082a6df63643c4ed35aebcd1932c29ca6a973564736f6c63430008070033",
									".code": [
										{
											"begin": 66,
											"end": 92,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 66,
											"end": 92,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66,
											"end": 92,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66,
											"end": 92,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66,
											"end": 92,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66,
											"end": 92,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"while.sol\":\"While\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"while.sol\":{\"keccak256\":\"0xcafbf9a22005bf489dadda512d9d27a5c9cc5d2263ef33a09a100945cc8ea267\",\"urls\":[\"bzz-raw://b96257a4b3214b4060fb604ec5b6218fa1ac2d92fc05cfa64464137723ba4bbd\",\"dweb:/ipfs/Qme2msSHhvdhMoLg9RFQzXDaVHZea81DofW66NjRf3LdEM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> while.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "while.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"while.sol": {
				"ast": {
					"absolutePath": "while.sol",
					"exportedSymbols": {
						"While": [
							2
						]
					},
					"id": 3,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "While",
							"nameLocation": "75:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "66:26:0",
							"usedErrors": []
						}
					],
					"src": "39:53:0"
				},
				"id": 0
			}
		}
	}
}